import os
import psycopg2
from psycopg2.extras import RealDictCursor
import requests
import telebot
from telebot import types
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

bot = telebot.TeleBot('7567419832:AAGv0eE9K7bAuOMMzv_F8SskyAb4Qcj-tG0')
ADMIN_GROUP_ID = "-4940285744"
ADMIN_IDS = [824360574]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
admin_states = {}
temp_profiles = {}
reply_contexts = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤

class UserState:
    LANGUAGE = "language"
    PREFERRED_NAME = "preferred_name"
    AGE = "age"
    GENDER = "gender"
    BIRTHPLACE = "birthplace"
    FAMILY = "family"
    COURSE = "course"
    SPECIALTY = "specialty"
    HOUSING = "housing"
    COMPLETED = "completed"

class AdminState:
    IDLE = "idle"
    REPLYING = "replying"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        database_url = os.environ.get('DATABASE_URL')
        
        if database_url:
            logging.info("Connecting to database via DATABASE_URL")
            conn = psycopg2.connect(database_url)
            logging.info("Database connection established successfully")
            return conn
        else:
            logging.error("DATABASE_URL not found in environment variables")
            return None
            
    except Exception as e:
        logging.error(f"Database connection error: {e}")
        return None

def init_database():
    logging.info("Initializing database...")
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS students (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    telegram_username VARCHAR(255),
                    telegram_first_name VARCHAR(255),
                    telegram_last_name VARCHAR(255),
                    preferred_name VARCHAR(255),
                    is_anonymous BOOLEAN DEFAULT FALSE,
                    user_language VARCHAR(10),
                    user_age INTEGER,
                    user_gender VARCHAR(20),
                    user_birthplace VARCHAR(100),
                    user_family_status VARCHAR(50),
                    user_course INTEGER,
                    user_specialty TEXT,
                    user_housing_type VARCHAR(50),
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    profile_completed BOOLEAN DEFAULT FALSE,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT,
                    question TEXT,
                    answer TEXT,
                    category VARCHAR(50),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admin_replies (
                    id SERIAL PRIMARY KEY,
                    admin_id BIGINT,
                    target_user_id BIGINT,
                    admin_message TEXT,
                    user_response TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    responded_at TIMESTAMP
                )
            ''')
            
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("Database initialized successfully")
            return True
        except Exception as e:
            logging.error(f"Database initialization error: {e}")
            conn.close()
            return False
    else:
        logging.error("Could not initialize database - no connection")
        return False

def save_student_profile(profile_data):
    logging.info(f"Saving profile for user {profile_data.get('telegram_id')}")
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO students (
                    telegram_id, telegram_username, telegram_first_name, 
                    telegram_last_name, preferred_name, is_anonymous, user_language, 
                    user_age, user_gender, user_birthplace, user_family_status, 
                    user_course, user_specialty, user_housing_type, profile_completed
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET
                    telegram_username = EXCLUDED.telegram_username,
                    telegram_first_name = EXCLUDED.telegram_first_name,
                    telegram_last_name = EXCLUDED.telegram_last_name,
                    preferred_name = EXCLUDED.preferred_name,
                    is_anonymous = EXCLUDED.is_anonymous,
                    user_language = EXCLUDED.user_language,
                    user_age = EXCLUDED.user_age,
                    user_gender = EXCLUDED.user_gender,
                    user_birthplace = EXCLUDED.user_birthplace,
                    user_family_status = EXCLUDED.user_family_status,
                    user_course = EXCLUDED.user_course,
                    user_specialty = EXCLUDED.user_specialty,
                    user_housing_type = EXCLUDED.user_housing_type,
                    profile_completed = EXCLUDED.profile_completed,
                    last_activity = CURRENT_TIMESTAMP
            ''', (
                profile_data['telegram_id'], profile_data.get('telegram_username'),
                profile_data.get('telegram_first_name'), profile_data.get('telegram_last_name'),
                profile_data.get('preferred_name'), profile_data.get('is_anonymous', False),
                profile_data.get('user_language'), profile_data.get('user_age'),
                profile_data.get('user_gender'), profile_data.get('user_birthplace'),
                profile_data.get('user_family_status'), profile_data.get('user_course'),
                profile_data.get('user_specialty'), profile_data.get('user_housing_type'),
                profile_data.get('profile_completed', False)
            ))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("Profile saved successfully")
            return True
        except Exception as e:
            logging.error(f"Error saving profile: {e}")
            conn.close()
            return False
    return False

def get_student_by_id(telegram_id):
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            cursor.execute('SELECT * FROM students WHERE telegram_id = %s', (telegram_id,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            return dict(result) if result else None
        except Exception as e:
            logging.error(f"Error getting student: {e}")
            conn.close()
            return None
    return None

def save_conversation(telegram_id, question, answer, category=None):
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO conversations (telegram_id, question, answer, category)
                VALUES (%s, %s, %s, %s)
            ''', (telegram_id, question, answer, category))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("Conversation saved")
        except Exception as e:
            logging.error(f"Error saving conversation: {e}")
            conn.close()

def save_admin_reply(admin_id, target_user_id, admin_message):
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO admin_replies (admin_id, target_user_id, admin_message)
                VALUES (%s, %s, %s) RETURNING id
            ''', (admin_id, target_user_id, admin_message))
            reply_id = cursor.fetchone()[0]
            conn.commit()
            cursor.close()
            conn.close()
            return reply_id
        except Exception as e:
            logging.error(f"Error saving admin reply: {e}")
            conn.close()
            return None
    return None

def update_admin_reply_response(reply_id, user_response):
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE admin_replies 
                SET user_response = %s, responded_at = CURRENT_TIMESTAMP 
                WHERE id = %s
            ''', (user_response, reply_id))
            conn.commit()
            cursor.close()
            conn.close()
        except Exception as e:
            logging.error(f"Error updating admin reply: {e}")
            conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
def create_language_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz"))
    markup.add(types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"))
    markup.add(types.InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en"))
    return markup

def create_name_preference_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    if language == "kz":
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ê—Ç—ã–º–¥—ã –∂–∞–∑—É", callback_data="name_custom"))
        markup.add(types.InlineKeyboardButton("üé≠ –ê–Ω–æ–Ω–∏–º–¥—ã “õ–∞–ª—É", callback_data="name_anonymous"))
    elif language == "en":
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è Enter my name", callback_data="name_custom"))
        markup.add(types.InlineKeyboardButton("üé≠ Stay anonymous", callback_data="name_anonymous"))
    else:
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∏–º—è", callback_data="name_custom"))
        markup.add(types.InlineKeyboardButton("üé≠ –û—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º", callback_data="name_anonymous"))
    return markup

def create_gender_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if language == "kz":
        markup.add(
            types.InlineKeyboardButton("üë® –ï—Ä", callback_data="gender_male"),
            types.InlineKeyboardButton("üë© ”ò–π–µ–ª", callback_data="gender_female")
        )
    elif language == "en":
        markup.add(
            types.InlineKeyboardButton("üë® Male", callback_data="gender_male"),
            types.InlineKeyboardButton("üë© Female", callback_data="gender_female")
        )
    else:
        markup.add(
            types.InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            types.InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
        )
    return markup

def create_birthplace_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    regions = [
        ("üèõÔ∏è –ì–æ—Ä–æ–¥ –ê—Å—Ç–∞–Ω–∞", "astana"),
        ("üåÜ –ì–æ—Ä–æ–¥ –ê–ª–º–∞-–ê—Ç–∞", "almaty"),
        ("üèôÔ∏è –ì–æ—Ä–æ–¥ –®—ã–º–∫–µ–Ω—Ç", "shymkent"),
        ("üåæ –ê–±–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "abai"),
        ("üå± –ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "akmola"),
        ("‚ö° –ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "aktobe"),
        ("üçé –ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "almaty_region"),
        ("üõ¢Ô∏è –ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "atyrau"),
        ("üèîÔ∏è –í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "east_kz"),
        ("üåø –ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "zhambyl"),
        ("üçá –ñ–µ—Ç—ã—Å—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "jetysu"),
        ("üåæ –ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "west_kz"),
        ("‚öíÔ∏è –ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "karaganda"),
        ("üåæ –ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "kostanay"),
        ("üèúÔ∏è –ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "kyzylorda"),
        ("üåä –ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "mangistau"),
        ("üè≠ –ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "pavlodar"),
        ("‚ùÑÔ∏è –°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "north_kz"),
        ("üïå –¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "turkestan"),
        ("‚õ∞Ô∏è –£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "ulytau")
    ]
    
    for text, callback_data in regions:
        markup.add(types.InlineKeyboardButton(text, callback_data=f"birthplace_{callback_data}"))
    
    return markup

def create_family_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    if language == "kz":
        markup.add(types.InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –¢–æ–ª—ã“õ –æ—Ç–±–∞—Å—ã", callback_data="family_full"))
        markup.add(types.InlineKeyboardButton("üíî –¢–æ–ª—ã“õ –µ–º–µ—Å –æ—Ç–±–∞—Å—ã", callback_data="family_incomplete"))
        markup.add(types.InlineKeyboardButton("üòî –ñ–µ—Ç—ñ–º", callback_data="family_orphan"))
    elif language == "en":
        markup.add(types.InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Complete family", callback_data="family_full"))
        markup.add(types.InlineKeyboardButton("üíî Incomplete family", callback_data="family_incomplete"))
        markup.add(types.InlineKeyboardButton("üòî Orphan", callback_data="family_orphan"))
    else:
        markup.add(types.InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–ª–Ω–∞—è", callback_data="family_full"))
        markup.add(types.InlineKeyboardButton("üíî –ù–µ–ø–æ–ª–Ω–∞—è", callback_data="family_incomplete"))
        markup.add(types.InlineKeyboardButton("üòî –°–∏—Ä–æ—Ç–∞", callback_data="family_orphan"))
    return markup

def create_course_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=4)
    markup.add(
        types.InlineKeyboardButton("1Ô∏è‚É£ 1 –∫—É—Ä—Å", callback_data="course_1"),
        types.InlineKeyboardButton("2Ô∏è‚É£ 2 –∫—É—Ä—Å", callback_data="course_2"),
        types.InlineKeyboardButton("3Ô∏è‚É£ 3 –∫—É—Ä—Å", callback_data="course_3"),
        types.InlineKeyboardButton("4Ô∏è‚É£ 4 –∫—É—Ä—Å", callback_data="course_4")
    )
    return markup

def create_housing_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    if language == "kz":
        markup.add(types.InlineKeyboardButton("üè† –ñ–∞—Ç–∞“õ—Ö–∞–Ω–∞", callback_data="housing_dormitory"))
        markup.add(types.InlineKeyboardButton("üè° –ñ–∞–ª–¥–∞—É", callback_data="housing_rent"))
        markup.add(types.InlineKeyboardButton("üèòÔ∏è –ú–µ–Ω—à—ñ–∫—Ç—ñ “Ø–π (—Ç—É—ã—Å—Ç–∞—Ä–¥–∞)", callback_data="housing_own"))
    elif language == "en":
        markup.add(types.InlineKeyboardButton("üè† Dormitory", callback_data="housing_dormitory"))
        markup.add(types.InlineKeyboardButton("üè° Rental", callback_data="housing_rent"))
        markup.add(types.InlineKeyboardButton("üèòÔ∏è Own housing (relatives)", callback_data="housing_own"))
    else:
        markup.add(types.InlineKeyboardButton("üè† –û–±—â–µ–∂–∏—Ç–∏–µ", callback_data="housing_dormitory"))
        markup.add(types.InlineKeyboardButton("üè° –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è", callback_data="housing_rent"))
        markup.add(types.InlineKeyboardButton("üèòÔ∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ (—É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤)", callback_data="housing_own"))
    return markup

def create_category_menu(language):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    categories = {
        'kz': [
            ("üí∞ “ö–∞—Ä–∂—ã–ª—ã“õ –º”ô—Å–µ–ª–µ–ª–µ—Ä", "finance"),
            ("üìö –û“õ—É “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä—ã", "study"),
            ("üò∞ ”ò–ª–µ—É–º–µ—Ç—Ç—ñ–∫ “õ–æ—Ä“õ—ã–Ω—ã—à—Ç–∞—Ä", "social"),
            ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–±–∞—Å—ã –∂”ô–Ω–µ –æ—Ä—Ç–∞", "family"),
            ("üè† –¢“±—Ä–º—ã—Å—Ç—ã“õ –º”ô—Å–µ–ª–µ–ª–µ—Ä", "household"),
            ("üéØ –ú–∞–º–∞–Ω–¥—ã“õ —Ç–∞“£–¥–∞—É", "career")
        ],
        'ru': [
            ("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", "finance"),
            ("üìö –£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", "study"),
            ("üò∞ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", "social"),
            ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", "family"),
            ("üè† –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", "household"),
            ("üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", "career")
        ],
        'en': [
            ("üí∞ Financial problems", "finance"),
            ("üìö Academic difficulties", "study"),
            ("üò∞ Social fears", "social"),
            ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family and environment", "family"),
            ("üè† Household problems", "household"),
            ("üéØ Career guidance", "career")
        ]
    }
    
    for text, callback_data in categories[language]:
        markup.add(types.InlineKeyboardButton(text, callback_data=f"{callback_data}_{language}"))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_menu"))
    return markup

def get_text(language, key):
    texts = {
        'language_select': {
            'kz': 'üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
            'en': 'üåê Choose language:'
        },
        'name_preference': {
            'kz': 'üëã –°—ñ–∑–≥–µ “õ–∞–ª–∞–π “õ–∞—Ä–∞—Ç—ã–ª—É—ã–Ω “õ–∞–ª–∞–π—Å—ã–∑?',
            'ru': 'üëã –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
            'en': 'üëã How would you like to be addressed?'
        },
        'name_input': {
            'kz': '‚úçÔ∏è –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:',
            'ru': '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
            'en': '‚úçÔ∏è Enter your name:'
        },
        'age_request': {
            'kz': 'üéÇ –ñ–∞—Å—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ (—Ç–µ–∫ —Ü–∏—Ñ—Ä–ª–∞—Ä):',
            'ru': 'üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
            'en': 'üéÇ Enter your age (numbers only):'
        },
        'gender_request': {
            'kz': '‚ößÔ∏è –ñ—ã–Ω—ã—Å—ã“£—ã–∑–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': '‚ößÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
            'en': '‚ößÔ∏è Choose your gender:'
        },
        'birthplace_request': {
            'kz': 'üèôÔ∏è –¢—É“ì–∞–Ω –∂–µ—Ä—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:',
            'en': 'üèôÔ∏è Choose your birthplace:'
        },
        'family_request': {
            'kz': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–±–∞—Å—ã–ª—ã“õ –∂–∞“ì–¥–∞–π—ã“£—ã–∑–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:',
            'en': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Choose your family status:'
        },
        'course_request': {
            'kz': 'üìö –ö—É—Ä—Å—ã“£—ã–∑–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': 'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:',
            'en': 'üìö Choose your year of study:'
        },
        'specialty_request': {
            'kz': 'üéì –ú–∞–º–∞–Ω–¥—ã“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:',
            'ru': 'üéì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:',
            'en': 'üéì Enter your specialty:'
        },
        'housing_request': {
            'kz': 'üè† –¢“±—Ä“ì—ã–ª—ã“õ—Ç—ã –∂–µ—Ä—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': 'üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:',
            'en': 'üè† Choose your housing type:'
        },
        'profile_complete': {
            'kz': '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—Ç—ã—Ä—ã–ª–¥—ã! –ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:',
            'ru': '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            'en': '‚úÖ Profile completed! Choose category:'
        },
        'age_invalid': {
            'kz': '‚ùå –ñ–∞—Å—ã“£—ã–∑–¥—ã –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (16-35 –∞—Ä–∞—Å—ã–Ω–¥–∞):',
            'ru': '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (16-35):',
            'en': '‚ùå Please enter a valid age (16-35):'
        }
    }
    
    return texts.get(key, {}).get(language, texts.get(key, {}).get('en', ''))

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start_command(message):
    logging.info(f"Start command from user {message.from_user.id}")
    
    student = get_student_by_id(message.from_user.id)
    
    if student and student.get('profile_completed'):
        logging.info(f"User {message.from_user.id} already has completed profile")
        language = student.get('user_language', 'ru')
        markup = create_category_menu(language)
        bot.reply_to(message, get_text(language, 'profile_complete'), reply_markup=markup)
    else:
        logging.info(f"Starting registration for user {message.from_user.id}")
        user_states[message.from_user.id] = UserState.LANGUAGE
        
        temp_profiles[message.from_user.id] = {
            'telegram_id': message.from_user.id,
            'telegram_username': message.from_user.username,
            'telegram_first_name': message.from_user.first_name,
            'telegram_last_name': message.from_user.last_name,
            'profile_completed': False
        }
        
        markup = create_language_menu()
        bot.reply_to(message, get_text('en', 'language_select'), reply_markup=markup)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")
    )
    markup.add(
        types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_users"),
        types.InlineKeyboardButton("üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="admin_conversations")
    )
    
    bot.reply_to(message, "üõ†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í
@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def handle_language_selection(call):
    logging.info(f"Language selection: {call.data} from user {call.from_user.id}")
    bot.answer_callback_query(call.id)
    
    language = call.data.split('_')[1]
    user_id = call.from_user.id
    
    if user_id not in temp_profiles:
        temp_profiles[user_id] = {
            'telegram_id': user_id,
            'telegram_username': call.from_user.username,
            'telegram_first_name': call.from_user.first_name,
            'telegram_last_name': call.from_user.last_name,
        }
    
    temp_profiles[user_id]['user_language'] = language
    user_states[user_id] = UserState.PREFERRED_NAME
    
    markup = create_name_preference_menu(language)
    bot.edit_message_text(
        get_text(language, 'name_preference'),
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('name_'))
def handle_name_preference(call):
    bot.answer_callback_query(call.id)
    
    preference = call.data.split('_')[1]
    user_id = call.from_user.id
    language = temp_profiles[user_id].get('user_language', 'ru')
    
    if preference == "anonymous":
        temp_profiles[user_id]['is_anonymous'] = True
        temp_profiles[user_id]['preferred_name'] = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_states[user_id] = UserState.AGE
        
        bot.edit_message_text(
            get_text(language, 'age_request'),
            call.message.chat.id,
            call.message.message_id
        )
    else:  # custom name
        temp_profiles[user_id]['is_anonymous'] = False
        user_states[user_id] = UserState.PREFERRED_NAME
        
        bot.edit_message_text(
            get_text(language, 'name_input'),
            call.message.chat.id,
            call.message.message_id
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('gender_'))
def handle_gender_selection(call):
    bot.answer_callback_query(call.id)
    
    gender = call.data.split('_')[1]
    user_id = call.from_user.id
    
    temp_profiles[user_id]['user_gender'] = gender
    user_states[user_id] = UserState.BIRTHPLACE
    
    language = temp_profiles[user_id].get('user_language', 'ru')
    markup = create_birthplace_menu(language)
    
    bot.edit_message_text(
        get_text(language, 'birthplace_request'),
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('birthplace_'))
def handle_birthplace_selection(call):
    bot.answer_callback_query(call.id)
    
    birthplace = call.data.split('_')[1]
    user_id = call.from_user.id
    
    temp_profiles[user_id]['user_birthplace'] = birthplace
    user_states[user_id] = UserState.FAMILY
    
    language = temp_profiles[user_id].get('user_language', 'ru')
    markup = create_family_menu(language)
    
    bot.edit_message_text(
        get_text(language, 'family_request'),
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('family_'))
def handle_family_selection(call):
    bot.answer_callback_query(call.id)
    
    family = call.data.split('_')[1]
    user_id = call.from_user.id
    
    temp_profiles[user_id]['user_family_status'] = family
    user_states[user_id] = UserState.COURSE
    
    language = temp_profiles[user_id].get('user_language', 'ru')
    markup = create_course_menu(language)
    
    bot.edit_message_text(
        get_text(language, 'course_request'),
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('course_'))
def handle_course_selection(call):
    bot.answer_callback_query(call.id)
    
    course = call.data.split('_')[1]
    user_id = call.from_user.id
    
    temp_profiles[user_id]['user_course'] = int(course)
    user_states[user_id] = UserState.SPECIALTY
    
    language = temp_profiles[user_id].get('user_language', 'ru')
    
    bot.edit_message_text(
        get_text(language, 'specialty_request'),
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('housing_'))
def handle_housing_selection(call):
    bot.answer_callback_query(call.id)
    
    housing = call.data.split('_')[1]
    user_id = call.from_user.id
    
    temp_profiles[user_id]['user_housing_type'] = housing
    temp_profiles[user_id]['profile_completed'] = True
    
    if save_student_profile(temp_profiles[user_id]):
        logging.info(f"Profile saved for user {user_id}")
        send_profile_to_admin(temp_profiles[user_id])
    
    user_states[user_id] = UserState.COMPLETED
    
    language = temp_profiles[user_id].get('user_language', 'ru')
    markup = create_category_menu(language)
    
    bot.edit_message_text(
        get_text(language, 'profile_complete'),
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def handle_back_to_menu(call):
    bot.answer_callback_query(call.id)
    
    student = get_student_by_id(call.from_user.id)
    if student and student.get('profile_completed'):
        language = student.get('user_language', 'ru')
        markup = create_category_menu(language)
        bot.edit_message_text(
            get_text(language, 'profile_complete'),
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: any(cat in call.data for cat in ['finance_', 'study_', 'social_', 'family_', 'household_', 'career_']))
def handle_category_selection(call):
    bot.answer_callback_query(call.id)
    
    parts = call.data.split('_')
    category = parts[0]
    
    category_messages = {
        "finance": "–£ –º–µ–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏ –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏–µ–π",
        "study": "–£ –º–µ–Ω—è —É—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏", 
        "social": "–£ –º–µ–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—â–µ–Ω–∏–µ–º",
        "family": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–º—å–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º",
        "household": "–£ –º–µ–Ω—è –±—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è",
        "career": "–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä—É –∫–∞—Ä—å–µ—Ä—ã"
    }
    
    category_names = {
        "finance": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "study": "–£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",
        "social": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", 
        "family": "–°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ",
        "household": "–ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "career": "–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"
    }
    
    if category in category_messages:
        bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_names[category]}\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            call.message.chat.id,
            call.message.message_id
        )
        
        send_to_shai_pro(category_messages[category], call.from_user, call.message.chat, category)

# –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_commands(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    bot.answer_callback_query(call.id)
    
    if call.data == "admin_stats":
        show_statistics(call.message)
    elif call.data == "admin_detailed_stats":
        show_detailed_statistics(call.message)
    elif call.data == "admin_users":
        show_users_list(call.message)
    elif call.data == "admin_conversations":
        show_conversations_history(call.message)
    elif call.data == "admin_back":
        admin_command(call.message)

def show_detailed_statistics(message):
    conn = get_db_connection()
    if not conn:
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM students WHERE profile_completed = TRUE")
        total_students = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM conversations")
        total_conversations = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM admin_replies")
        total_admin_replies = cursor.fetchone()[0]
        
        # –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        cursor.execute("""
            SELECT user_birthplace, COUNT(*) as count 
            FROM students WHERE profile_completed = TRUE 
            GROUP BY user_birthplace 
            ORDER BY count DESC 
            LIMIT 5
        """)
        regions_stats = cursor.fetchall()
        
        # –ü–æ –ø–æ–ª—É
        cursor.execute("SELECT user_gender, COUNT(*) FROM students WHERE profile_completed = TRUE GROUP BY user_gender")
        gender_stats = cursor.fetchall()
        
        # –ü–æ —Ç–∏–ø—É –∂–∏–ª—å—è
        cursor.execute("SELECT user_housing_type, COUNT(*) FROM students WHERE profile_completed = TRUE GROUP BY user_housing_type")
        housing_stats = cursor.fetchall()
        
        # –ü–æ —Å–µ–º–µ–π–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
        cursor.execute("SELECT user_family_status, COUNT(*) FROM students WHERE profile_completed = TRUE GROUP BY user_family_status")
        family_stats = cursor.fetchall()
        
        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤
        cursor.execute("SELECT category, COUNT(*) FROM conversations WHERE category IS NOT NULL GROUP BY category ORDER BY COUNT(*) DESC")
        category_stats = cursor.fetchall()
        
        # –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT COUNT(*) FROM students WHERE is_anonymous = TRUE AND profile_completed = TRUE")
        anonymous_count = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        text += f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n"
        text += f"üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_conversations}\n"
        text += f"üìß –û—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤: {total_admin_replies}\n"
        text += f"üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö: {anonymous_count}\n\n"
        
        # –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤
        if regions_stats:
            text += f"üèôÔ∏è –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤:\n"
            region_names = {
                'astana': '–ê—Å—Ç–∞–Ω–∞', 'almaty': '–ê–ª–º–∞-–ê—Ç–∞', 'shymkent': '–®—ã–º–∫–µ–Ω—Ç',
                'akmola': '–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è', 'almaty_region': '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è'
            }
            for region, count in regions_stats:
                region_name = region_names.get(region, region.replace('_', ' ').title())
                text += f"   {region_name}: {count}\n"
            text += "\n"
        
        # –ü–æ –ø–æ–ª—É
        if gender_stats:
            text += f"‚ößÔ∏è –ü–æ –ø–æ–ª—É:\n"
            gender_names = {'male': '–ú—É–∂—Å–∫–æ–π', 'female': '–ñ–µ–Ω—Å–∫–∏–π'}
            for gender, count in gender_stats:
                gender_name = gender_names.get(gender, gender)
                text += f"   {gender_name}: {count}\n"
            text += "\n"
        
        # –ü–æ –∂–∏–ª—å—é
        if housing_stats:
            text += f"üè† –¢–∏–ø –∂–∏–ª—å—è:\n"
            housing_names = {'dormitory': '–û–±—â–µ–∂–∏—Ç–∏–µ', 'rent': '–ê—Ä–µ–Ω–¥–∞', 'own': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ'}
            for housing, count in housing_stats:
                housing_name = housing_names.get(housing, housing)
                text += f"   {housing_name}: {count}\n"
            text += "\n"
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_stats:
            text += f"üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            category_names = {
                'finance': '–§–∏–Ω–∞–Ω—Å—ã', 'study': '–£—á–µ–±–∞', 'social': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
                'family': '–°–µ–º—å—è', 'household': '–ë—ã—Ç', 'career': '–ö–∞—Ä—å–µ—Ä–∞'
            }
            for category, count in category_stats:
                category_name = category_names.get(category, category)
                text += f"   {category_name}: {count}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        try:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=markup)
        except:
            bot.send_message(message.chat.id, text, reply_markup=markup)
        
    except Exception as e:
        logging.error(f"Error in detailed stats: {e}")
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def show_users_list(message, page=1):
    conn = get_db_connection()
    if not conn:
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        cursor = conn.cursor()
        offset = (page - 1) * 5
        
        cursor.execute('''
            SELECT telegram_id, preferred_name, is_anonymous, user_course, 
                   user_specialty, registration_date, last_activity
            FROM students 
            WHERE profile_completed = TRUE 
            ORDER BY last_activity DESC 
            LIMIT 5 OFFSET %s
        ''', (offset,))
        users = cursor.fetchall()
        
        cursor.execute("SELECT COUNT(*) FROM students WHERE profile_completed = TRUE")
        total_users = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        
        if not users:
            text = "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        else:
            text = f"üë• –°—Ç—É–¥–µ–Ω—Ç—ã (—Å—Ç—Ä. {page}):\n\n"
            
            for user in users:
                telegram_id, preferred_name, is_anonymous, course, specialty, reg_date, last_activity = user
                
                if is_anonymous:
                    name = "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–π"
                else:
                    name = preferred_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                text += f"üë§ {name}\n"
                text += f"ID: {telegram_id}\n"
                text += f"–ö—É—Ä—Å: {course or '?'}\n"
                text += f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m %H:%M')}\n"
                text += f"üìß –û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{telegram_id}\n\n"
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"users_page_{page-1}"))
        if len(users) == 5 and (page * 5) < total_users:
            nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"users_page_{page+1}"))
        
        if nav_buttons:
            markup.add(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        try:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=markup)
        except:
            bot.send_message(message.chat.id, text, reply_markup=markup)
        
    except Exception as e:
        logging.error(f"Error in users list: {e}")
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('users_page_'))
def handle_users_pagination(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    bot.answer_callback_query(call.id)
    page = int(call.data.split('_')[-1])
    show_users_list(call.message, page)

def show_conversations_history(message):
    conn = get_db_connection()
    if not conn:
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT c.telegram_id, s.preferred_name, s.is_anonymous, c.question, 
                   c.answer, c.category, c.created_at
            FROM conversations c
            JOIN students s ON c.telegram_id = s.telegram_id
            ORDER BY c.created_at DESC
            LIMIT 5
        ''')
        conversations = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        if not conversations:
            text = "–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤"
        else:
            text = "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏:\n\n"
            
            for conv in conversations:
                telegram_id, preferred_name, is_anonymous, question, answer, category, created_at = conv
                
                if is_anonymous:
                    name = "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–π"
                else:
                    name = preferred_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                text += f"üë§ {name} (ID: {telegram_id})\n"
                text += f"‚ùì {question[:50]}{'...' if len(question) > 50 else ''}\n"
                text += f"ü§ñ {answer[:50]}{'...' if len(answer) > 50 else ''}\n"
                text += f"üìÖ {created_at.strftime('%d.%m %H:%M')}\n"
                text += f"üìß –û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{telegram_id}\n\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        try:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=markup)
        except:
            bot.send_message(message.chat.id, text, reply_markup=markup)
        
    except Exception as e:
        logging.error(f"Error in conversations history: {e}")
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")

# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –ê–î–ú–ò–ù–û–í
@bot.message_handler(func=lambda message: message.text and message.text.startswith('/reply_') and message.from_user.id in ADMIN_IDS)
def handle_admin_reply_command(message):
    try:
        target_user_id = int(message.text.split('_')[1])
        admin_states[message.from_user.id] = AdminState.REPLYING
        reply_contexts[message.from_user.id] = target_user_id
        
        student = get_student_by_id(target_user_id)
        if student:
            name = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if student.get('is_anonymous') else (student.get('preferred_name') or "–ë–µ–∑ –∏–º–µ–Ω–∏")
            bot.reply_to(message, f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name} (ID: {target_user_id})\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        else:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (ValueError, IndexError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

# –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id in ADMIN_IDS and user_id in admin_states and admin_states[user_id] == AdminState.REPLYING:
        target_user_id = reply_contexts.get(user_id)
        if target_user_id:
            try:
                bot.send_message(target_user_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                reply_id = save_admin_reply(user_id, target_user_id, message.text)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                bot.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                admin_states[user_id] = AdminState.IDLE
                if user_id in reply_contexts:
                    del reply_contexts[user_id]
                
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return
    
    logging.info(f"Message from user {user_id}: '{message.text}'")
    logging.info(f"User state: {user_states.get(user_id, 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if user_id not in user_states and message.reply_to_message and "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏" in message.reply_to_message.text:
        student = get_student_by_id(user_id)
        if student:
            name = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if student.get('is_anonymous') else (student.get('preferred_name') or "–ë–µ–∑ –∏–º–µ–Ω–∏")
            
            admin_notification = f"""
üì® –û–¢–í–ï–¢ –ù–ê –°–û–û–ë–©–ï–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò

üë§ –û—Ç: {name}
üÜî ID: {user_id}
üìß –û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user_id}

üí¨ –û—Ç–≤–µ—Ç:
{message.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
            try:
                bot.send_message(ADMIN_GROUP_ID, admin_notification)
                logging.info(f"Admin notification sent for user {user_id}")
            except Exception as e:
                logging.error(f"Error sending admin notification: {e}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id in user_states:
        state = user_states[user_id]
        
        if state == UserState.PREFERRED_NAME:
            if user_id in temp_profiles and not temp_profiles[user_id].get('is_anonymous', False):
                temp_profiles[user_id]['preferred_name'] = message.text
                user_states[user_id] = UserState.AGE
                
                language = temp_profiles[user_id].get('user_language', 'ru')
                bot.reply_to(message, get_text(language, 'age_request'))
            else:
                language = temp_profiles.get(user_id, {}).get('user_language', 'ru')
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞")
                
        elif state == UserState.AGE:
            try:
                age = int(message.text.strip())
                if 16 <= age <= 35:
                    if user_id in temp_profiles:
                        temp_profiles[user_id]['user_age'] = age
                        user_states[user_id] = UserState.GENDER
                        
                        language = temp_profiles[user_id].get('user_language', 'ru')
                        markup = create_gender_menu(language)
                        bot.reply_to(message, get_text(language, 'gender_request'), reply_markup=markup)
                    else:
                        bot.reply_to(message, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
                else:
                    language = temp_profiles.get(user_id, {}).get('user_language', 'ru')
                    bot.reply_to(message, get_text(language, 'age_invalid'))
            except ValueError:
                language = temp_profiles.get(user_id, {}).get('user_language', 'ru')
                bot.reply_to(message, get_text(language, 'age_invalid'))
                
        elif state == UserState.SPECIALTY:
            if user_id in temp_profiles:
                temp_profiles[user_id]['user_specialty'] = message.text
                user_states[user_id] = UserState.HOUSING
                
                language = temp_profiles[user_id].get('user_language', 'ru')
                markup = create_housing_menu(language)
                bot.reply_to(message, get_text(language, 'housing_request'), reply_markup=markup)
            else:
                bot.reply_to(message, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∫–Ω–æ–ø–æ–∫
            language = temp_profiles.get(user_id, {}).get('user_language', 'ru')
            if state in [UserState.LANGUAGE, UserState.GENDER, UserState.BIRTHPLACE, UserState.FAMILY, UserState.COURSE, UserState.HOUSING]:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞")
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                student = get_student_by_id(user_id)
                if student and student.get('profile_completed'):
                    send_to_shai_pro(message.text, message.from_user, message.chat)
                else:
                    start_command(message)
    
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        student = get_student_by_id(user_id)
        
        if student and student.get('profile_completed'):
            send_to_shai_pro(message.text, message.from_user, message.chat)
        else:
            start_command(message)

# SHAI.PRO –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
def send_to_shai_pro(text, user, chat, category=None):
    logging.info(f"Sending to shai.pro: {text[:50]}... from user {user.id}")
    
    headers = {
        'Authorization': 'Bearer app-LqQKmr2WcmFUTAjZk2adM46j',
        'Content-Type': 'application/json'
    }
    
    data = {
        'inputs': {},
        'query': text,
        'response_mode': 'blocking',
        'user': str(user.id)
    }
    
    try:
        response = requests.post('https://hackathon.shai.pro/v1/chat-messages', 
                               json=data, headers=headers, timeout=30)
        
        logging.info(f"Shai.pro response status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get('answer', '')
            
            if not answer or answer.strip() == '':
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            
            if len(answer) > 4096:
                answer = answer[:4090] + "..."
            
            save_conversation(user.id, text, answer, category)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_menu"))
            
            bot.send_message(chat.id, answer, reply_markup=markup)
            send_conversation_report(user, text, answer, category)
            
        else:
            bot.send_message(chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥: {response.status_code}")
            
    except requests.Timeout:
        bot.send_message(chat.id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"Shai.pro request error: {e}")
        bot.send_message(chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def send_conversation_report(user, question, answer, category):
    try:
        logging.info(f"Attempting to send conversation report for user {user.id}")
        
        student = get_student_by_id(user.id)
        if not student:
            logging.warning(f"No student found for user {user.id}")
            return
            
        if student.get('is_anonymous'):
            name = "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            name = student.get('preferred_name') or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        category_names = {
            'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'study': 'üìö –£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏',
            'social': 'üò∞ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏',
            'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
            'household': 'üè† –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'career': 'üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è'
        }
        
        report = f"""
üí¨ –ù–û–í–´–ô –î–ò–ê–õ–û–ì

üë§ –û—Ç: {name}
üÜî ID: {user.id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_names.get(category, '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å')}
üïê –í—Ä–µ–º—è: {datetime.now().strftime("%d.%m.%Y %H:%M")}
üìß –û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user.id}

‚ùì –í–æ–ø—Ä–æ—Å:
{question}

ü§ñ –û—Ç–≤–µ—Ç:
{answer[:300]}{'...' if len(answer) > 300 else ''}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
        
        bot.send_message(ADMIN_GROUP_ID, report)
        logging.info("Conversation report sent to admin group successfully")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def send_profile_to_admin(profile):
    try:
        logging.info(f"Attempting to send profile to admin group for user {profile.get('telegram_id')}")
        
        region_names = {
            'astana': '–ì–æ—Ä–æ–¥ –ê—Å—Ç–∞–Ω–∞', 'almaty': '–ì–æ—Ä–æ–¥ –ê–ª–º–∞-–ê—Ç–∞', 'shymkent': '–ì–æ—Ä–æ–¥ –®—ã–º–∫–µ–Ω—Ç',
            'abai': '–ê–±–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'akmola': '–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'aktobe': '–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'almaty_region': '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'atyrau': '–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'east_kz': '–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'zhambyl': '–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'jetysu': '–ñ–µ—Ç—ã—Å—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'west_kz': '–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'karaganda': '–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'kostanay': '–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'kyzylorda': '–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'mangistau': '–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'pavlodar': '–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'north_kz': '–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'turkestan': '–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'ulytau': '–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
        }
        
        family_names = {'full': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–ª–Ω–∞—è —Å–µ–º—å—è', 'incomplete': 'üíî –ù–µ–ø–æ–ª–Ω–∞—è —Å–µ–º—å—è', 'orphan': 'üòî –°–∏—Ä–æ—Ç–∞'}
        gender_names = {'male': 'üë® –ú—É–∂—Å–∫–æ–π', 'female': 'üë© –ñ–µ–Ω—Å–∫–∏–π'}
        housing_names = {'dormitory': 'üè† –û–±—â–µ–∂–∏—Ç–∏–µ', 'rent': 'üè° –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è', 'own': 'üèòÔ∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ'}
        
        if profile.get('is_anonymous'):
            display_name = "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            display_name = profile.get('preferred_name') or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        report = f"""
üìã –ù–û–í–´–ô –°–¢–£–î–ï–ù–¢ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù

üë§ –ò–º—è: {display_name}
üÜî Telegram ID: {profile.get('telegram_id')}
üìû Username: @{profile.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('user_age')}
‚ößÔ∏è –ü–æ–ª: {gender_names.get(profile.get('user_gender'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üèôÔ∏è –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {region_names.get(profile.get('user_birthplace'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: {family_names.get(profile.get('user_family_status'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìö –ö—É—Ä—Å: {profile.get('user_course')} –∫—É—Ä—Å
üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {profile.get('user_specialty')}
üè† –ñ–∏–ª—å–µ: {housing_names.get(profile.get('user_housing_type'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üåê –Ø–∑—ã–∫: {profile.get('user_language', 'ru').upper()}
üïê –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime("%d.%m.%Y %H:%M")}
üìß –ù–∞–ø–∏—Å–∞—Ç—å: /reply_{profile.get('telegram_id')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
        
        bot.send_message(ADMIN_GROUP_ID, report)
        logging.info("Profile report sent to admin group successfully")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∞–º: {e}")

def show_statistics(message):
    conn = get_db_connection()
    if not conn:
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    try:
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM students WHERE profile_completed = TRUE")
        total_students = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM conversations")
        total_conversations = cursor.fetchone()[0]
        
        cursor.execute("SELECT user_course, COUNT(*) FROM students WHERE profile_completed = TRUE GROUP BY user_course ORDER BY user_course")
        courses_stats = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–£–î–ï–ù–¢–û–í\n\n"
        text += f"üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_students}\n"
        text += f"üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {total_conversations}\n\n"
        
        if courses_stats:
            text += f"üìö –ü–æ –∫—É—Ä—Å–∞–º:\n"
            for course, count in courses_stats:
                text += f"   {course} –∫—É—Ä—Å: {count} —á–µ–ª.\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        try:
            bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=markup)
        except:
            bot.send_message(message.chat.id, text, reply_markup=markup)
        
    except Exception as e:
        logging.error(f"Error showing statistics: {e}")
        try:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.chat.id, message.message_id)
        except:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data == "admin_back")
def admin_back(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    bot.answer_callback_query(call.id)
    admin_command(call.message)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö
if __name__ == "__main__":
    logging.info("Starting bot initialization...")
    
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        logging.error("DATABASE_URL not found")
        logging.error("Starting bot without database for testing...")
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ë–î
        def save_student_profile(profile_data):
            logging.info(f"Would save profile for {profile_data.get('telegram_id')}")
            return True

        def get_student_by_id(telegram_id):
            return None

        def save_conversation(telegram_id, question, answer, category=None):
            logging.info(f"Would save conversation for {telegram_id}")

        def save_admin_reply(admin_id, target_user_id, admin_message):
            logging.info(f"Would save admin reply from {admin_id} to {target_user_id}")
            return 1

        def update_admin_reply_response(reply_id, user_response):
            logging.info(f"Would update admin reply {reply_id}")

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        globals()['save_student_profile'] = save_student_profile
        globals()['get_student_by_id'] = get_student_by_id
        globals()['save_conversation'] = save_conversation
        globals()['save_admin_reply'] = save_admin_reply
        globals()['update_admin_reply_response'] = update_admin_reply_response
        
        logging.info("Bot started successfully (without database)")
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"Polling error: {e}")
    else:
        logging.info(f"DATABASE_URL found: {database_url[:30]}...")
        
        if init_database():
            logging.info("Bot started successfully with database")
            try:
                bot.polling(none_stop=True, interval=0)
            except Exception as e:
                logging.error(f"Polling error: {e}")
        else:
            logging.error("Failed to initialize database")