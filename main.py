import requests
import telebot
import logging

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('7567419832:AAGv0eE9K7bAuOMMzv_F8SskyAb4Qcj-tG0')
ADMIN_GROUP_ID = "-4940285744"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞–º
    try:
        user_name = message.from_user.first_name
        if message.from_user.username:
            user_name += f" (@{message.from_user.username})"
        
        admin_msg = f"üì© –í—Ö–æ–¥—è—â–µ–µ –æ—Ç {user_name}:\n{message.text}"
        bot.send_message(ADMIN_GROUP_ID, admin_msg)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ shai.pro
    headers = {
        'Authorization': 'Bearer app-LqQKmr2WcmFUTAjZk2adM46j',
        'Content-Type': 'application/json'
    }
    
    data = {
        'inputs': {},
        'query': message.text,
        'response_mode': 'blocking',
        'user': str(message.from_user.id),
        'conversation_id': f"telegram_{message.chat.id}"
    }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π API endpoint
        response = requests.post('https://hackathon.shai.pro/api/v1/apps/ODwjlCdBp4b1Bzsh/chat-messages', 
                               json=data, headers=headers)
        
        logging.info(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get('answer', '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
            
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, answer)
            
            # –î—É–±–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞–º
            try:
                bot.send_message(ADMIN_GROUP_ID, f"ü§ñ –û—Ç–≤–µ—Ç –¥–ª—è {user_name}:\n{answer}")
            except:
                pass
        else:
            bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ API: {e}")
        bot.reply_to(message, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

bot.polling()