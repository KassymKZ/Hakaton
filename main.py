import requests
import telebot
from telebot import types
import logging

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('7567419832:AAGv0eE9K7bAuOMMzv_F8SskyAb4Qcj-tG0')
ADMIN_GROUP_ID = "-4940285744"
ADMIN_IDS = [824360574]

# hjgihg
def create_category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="finance"),
        types.InlineKeyboardButton("üìö –£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", callback_data="study")
    )
    markup.add(
        types.InlineKeyboardButton("üò∞ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", callback_data="social"),
        types.InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", callback_data="family")
    )
    markup.add(
        types.InlineKeyboardButton("üè† –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="household"),
        types.InlineKeyboardButton("üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", callback_data="career")
    )
    return markup

@bot.message_handler(commands=['start', 'menu', 'categories'])
def show_categories(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ shai.pro"""
    markup = create_category_menu()
    text = """–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    
    bot.reply_to(message, text, reply_markup=markup)
    # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º handle_message –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é

@bot.callback_query_handler(func=lambda call: True)
def handle_category_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    bot.answer_callback_query(call.id)
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    category_messages = {
        "finance": "–£ –º–µ–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏ –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏–µ–π",
        "study": "–£ –º–µ–Ω—è —É—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏", 
        "social": "–£ –º–µ–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—â–µ–Ω–∏–µ–º",
        "family": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–º—å–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º",
        "household": "–£ –º–µ–Ω—è –±—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è",
        "career": "–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä—É –∫–∞—Ä—å–µ—Ä—ã"
    }
    
    if call.data in category_messages:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ shai.pro
        fake_message = type('obj', (object,), {
            'text': category_messages[call.data],
            'from_user': call.from_user,
            'chat': call.message.chat,
            'message_id': call.message.message_id
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã–±–æ—Ä–µ
        category_names = {
            "finance": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "study": "–£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",
            "social": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", 
            "family": "–°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ",
            "household": "–ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "career": "–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"
        }
        
        bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_names[call.data]}\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ shai.pro
        handle_message(fake_message)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
    if message.text.startswith('/menu') or message.text.startswith('/start') or message.text.startswith('/categories'):
        # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ shai.pro
        return
    
    # –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    try:
        user_name = message.from_user.first_name
        if message.from_user.username:
            user_name += f" (@{message.from_user.username})"
        
        admin_msg = f"–í—Ö–æ–¥—è—â–µ–µ –æ—Ç {user_name}: {message.text}"
        bot.send_message(ADMIN_GROUP_ID, admin_msg)
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ shai.pro
    headers = {
        'Authorization': 'Bearer app-LqQKmr2WcmFUTAjZk2adM46j',
        'Content-Type': 'application/json'
    }
    
    data = {
        'inputs': {},
        'query': message.text,
        'response_mode': 'blocking',
        'user': str(message.from_user.id)
    }
    
    try:
        response = requests.post('https://hackathon.shai.pro/v1/chat-messages', 
                               json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get('answer', '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="back_to_menu"))
            
            bot.reply_to(message, answer, reply_markup=markup)
            
            # –î—É–±–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞–º
            try:
                bot.send_message(ADMIN_GROUP_ID, f"–û—Ç–≤–µ—Ç –¥–ª—è {user_name}: {answer}")
            except:
                pass
        else:
            bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    bot.answer_callback_query(call.id)
    markup = create_category_menu()
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

bot.polling()