import requests
import telebot
from telebot import types
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('7567419832:AAGv0eE9K7bAuOMMzv_F8SskyAb4Qcj-tG0')
ADMIN_GROUP_ID = "-4940285744"
ADMIN_IDS = [824360574]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

def create_category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="finance"))
    markup.add(types.InlineKeyboardButton("üìö –£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", callback_data="study"))
    markup.add(types.InlineKeyboardButton("üò∞ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", callback_data="social"))
    markup.add(types.InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", callback_data="family"))
    markup.add(types.InlineKeyboardButton("üè† –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="household"))
    markup.add(types.InlineKeyboardButton("üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", callback_data="career"))
    return markup

def get_user_info(user):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    full_name = user.first_name or ""
    if user.last_name:
        full_name += f" {user.last_name}"
    
    username = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    return {
        'full_name': full_name,
        'username': username,
        'user_id': user.id,
        'timestamp': datetime.now().strftime("%d.%m.%Y %H:%M")
    }

def send_admin_report(user_info, question, bot_answer, category=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É"""
    try:
        category_names = {
            'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'study': 'üìö –£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏',
            'social': 'üò∞ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏',
            'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
            'household': 'üè† –ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'career': 'üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è'
        }
        
        category_text = category_names.get(category, '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å') if category else '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å'
        
        report = f"""
üìã –û–¢–ß–ï–¢ –û –î–ò–ê–õ–û–ì–ï

üë§ –û—Ç: {user_info['full_name']}
üìû Username: {user_info['username']}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['user_id']}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_text}
üïê –í—Ä–µ–º—è: {user_info['timestamp']}

‚ùì –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{question}

ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:
{bot_answer[:1000]}{'...' if len(bot_answer) > 1000 else ''}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""
        
        bot.send_message(ADMIN_GROUP_ID, report)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º: {e}")

@bot.message_handler(commands=['start', 'menu', 'categories'])
def show_categories(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º"""
    markup = create_category_menu()
    text = """–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    bot.answer_callback_query(call.id)
    markup = create_category_menu()
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_category_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    bot.answer_callback_query(call.id)
    
    if call.data == "back_to_menu":
        back_to_menu(call)
        return
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    category_messages = {
        "finance": "–£ –º–µ–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏ –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏–µ–π",
        "study": "–£ –º–µ–Ω—è —É—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏", 
        "social": "–£ –º–µ–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—â–µ–Ω–∏–µ–º",
        "family": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–º—å–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º",
        "household": "–£ –º–µ–Ω—è –±—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è",
        "career": "–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä—É –∫–∞—Ä—å–µ—Ä—ã"
    }
    
    category_names = {
        "finance": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "study": "–£—á–µ–±–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",
        "social": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏", 
        "family": "–°–µ–º—å—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ",
        "household": "–ë—ã—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "career": "–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"
    }
    
    if call.data in category_messages:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_info = get_user_info(call.from_user)
        user_sessions[call.from_user.id] = {
            'user_info': user_info,
            'category': call.data,
            'question': category_messages[call.data]
        }
        
        bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_names[call.data]}\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ shai.pro
        send_to_shai_pro(category_messages[call.data], call.from_user, call.message.chat, call.data)

def send_to_shai_pro(text, user, chat, category=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ shai.pro"""
    
    headers = {
        'Authorization': 'Bearer app-LqQKmr2WcmFUTAjZk2adM46j',
        'Content-Type': 'application/json'
    }
    
    data = {
        'inputs': {},
        'query': text,
        'response_mode': 'blocking',
        'user': str(user.id)
    }
    
    try:
        response = requests.post('https://hackathon.shai.pro/v1/chat-messages', 
                               json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            answer = result.get('answer', '')
            
            if not answer or answer.strip() == '':
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            
            if len(answer) > 4096:
                answer = answer[:4090] + "..."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="back_to_menu"))
            
            bot.send_message(chat.id, answer, reply_markup=markup)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∞–º
            if user.id in user_sessions:
                session_data = user_sessions[user.id]
                send_admin_report(
                    session_data['user_info'],
                    text,
                    answer,
                    category
                )
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                del user_sessions[user.id]
                
        else:
            bot.send_message(chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥: {response.status_code}")
            
    except requests.Timeout:
        bot.send_message(chat.id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    if message.text.startswith('/menu') or message.text.startswith('/start') or message.text.startswith('/categories'):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_info = get_user_info(message.from_user)
    user_sessions[message.from_user.id] = {
        'user_info': user_info,
        'category': None,
        'question': message.text
    }
    
    send_to_shai_pro(message.text, message.from_user, message.chat)

bot.polling()